#!/usr/bin/env node

/**
 * Êó¢Â≠ò„É©„Ç§„Éñ„É©„É™„ÇíÊ¥ªÁî®„Åó„Åü„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê„Çπ„ÇØ„É™„Éó„Éà
 * 
 * „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ‰ª•‰∏ã„ÅÆÊó¢Â≠ò„É©„Ç§„Éñ„É©„É™„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶‰ΩøÁî®„Åó„Åæ„ÅôÔºö
 * - TypeDoc: TypeScript API„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
 * - JSDoc: JavaScript API„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
 * - chokidar: „Éï„Ç°„Ç§„É´Â§âÊõ¥Áõ£Ë¶ñ
 * - glob: „Éï„Ç°„Ç§„É´„Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅ„É≥„Ç∞
 * - fs-extra: „Éï„Ç°„Ç§„É´„Ç∑„Çπ„ÉÜ„É†Êìç‰Ωú
 */

const fs = require('fs-extra');
const path = require('path');
const glob = require('glob');
const { execSync } = require('child_process');

/**
 * „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„ÅÆÂÆöÁæ©
 * ÂêÑ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂΩπÂâ≤„Å®Ë™¨Êòé„ÇíÂÆöÁæ©
 */
const PROJECT_STRUCTURE = {
    'src': {
        description: 'TypeScript„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ',
        purpose: 'VSCodeÊã°ÂºµÊ©üËÉΩ„ÅÆ„É°„Ç§„É≥„É≠„Ç∏„ÉÉ„ÇØ',
        files: {
            'extension.ts': 'Êã°ÂºµÊ©üËÉΩ„ÅÆ„Ç®„É≥„Éà„É™„Éº„Éù„Ç§„É≥„Éà',
            'parsers/': 'Blade„ÉÜ„É≥„Éó„É¨„Éº„ÉàËß£Êûê„É≠„Ç∏„ÉÉ„ÇØ',
            'providers/': 'VSCode„ÉÑ„É™„Éº„Éì„É•„Éº„Éó„É≠„Éê„Ç§„ÉÄ„Éº'
        }
    },
    '__test__': {
        description: '„ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´',
        purpose: '„É¶„Éã„ÉÉ„Éà„ÉÜ„Çπ„Éà„Å®Áµ±Âêà„ÉÜ„Çπ„Éà',
        files: {
            'extension.test.ts': '„É°„Ç§„É≥Êã°ÂºµÊ©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà',
            'parsers/': '„Éë„Éº„Çµ„Éº„ÅÆ„ÉÜ„Çπ„Éà',
            'providers/': '„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÅÆ„ÉÜ„Çπ„Éà',
            'mocks/': '„ÉÜ„Çπ„ÉàÁî®„É¢„ÉÉ„ÇØ„Éï„Ç°„Ç§„É´'
        }
    },
    'scripts': {
        description: 'ÈñãÁô∫Áî®„Çπ„ÇØ„É™„Éó„Éà',
        purpose: '„Éì„É´„Éâ„ÄÅ„ÉÜ„Çπ„Éà„ÄÅ„Éë„ÉÉ„Ç±„Éº„Ç∏Âåñ„ÅÆËá™ÂãïÂåñ',
        files: {
            'package.js': '„Éë„ÉÉ„Ç±„Éº„Ç∏Âåñ„Çπ„ÇØ„É™„Éó„Éà',
            'quality-check.js': 'ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ„Çπ„ÇØ„É™„Éó„Éà',
            'simple-test.js': 'Á∞°Âçò„Å™„ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà',
            'test-watch.js': '„ÉÜ„Çπ„ÉàÁõ£Ë¶ñ„Çπ„ÇØ„É™„Éó„Éà',
            'docs-generator.js': '„Éâ„Ç≠„É•„É°„É≥„ÉàËá™ÂãïÁîüÊàê„Çπ„ÇØ„É™„Éó„Éà',
            'docs-watcher.js': '„Éâ„Ç≠„É•„É°„É≥„ÉàÁõ£Ë¶ñ„Çπ„ÇØ„É™„Éó„Éà'
        }
    },
    'docs': {
        description: 'ÊäÄË°ìË≥áÊñô',
        purpose: '„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊäÄË°ì‰ªïÊßò„Å®ÈñãÁô∫„Ç¨„Ç§„Éâ',
        files: {
            'TECHNICAL.md': 'ÊäÄË°ì‰ªïÊßòÊõ∏',
            'STRUCTURE.md': '„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†Ë™¨ÊòéÔºàËá™ÂãïÁîüÊàêÔºâ'
        }
    },
    'dist': {
        description: '„Éì„É´„ÉâÊàêÊûúÁâ©',
        purpose: 'VSCodeÊã°ÂºµÊ©üËÉΩ„Éë„ÉÉ„Ç±„Éº„Ç∏Ôºà.vsixÔºâ',
        files: {}
    },
    '.husky': {
        description: 'Git hooks',
        purpose: '„Ç≥„Éü„ÉÉ„ÉàÂâç„ÅÆÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØËá™ÂãïÂåñ',
        files: {
            'pre-commit': '„Ç≥„Éü„ÉÉ„ÉàÂâçÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ',
            'commit-msg': '„Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ'
        }
    },
    '.github/workflows': {
        description: 'CI/CDË®≠ÂÆö',
        purpose: 'GitHub Actions„Å´„Çà„ÇãËá™Âãï„ÉÜ„Çπ„Éà„Éª„Éá„Éó„É≠„Ç§',
        files: {
            'ci.yml': 'CI/CD„Éë„Ç§„Éó„É©„Ç§„É≥Ë®≠ÂÆö'
        }
    },
    'templates': {
        description: '„ÉÜ„É≥„Éó„É¨„Éº„Éà„Éï„Ç°„Ç§„É´',
        purpose: '„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁîüÊàêÁî®„ÉÜ„É≥„Éó„É¨„Éº„Éà',
        files: {}
    },
    '.devcontainer': {
        description: 'ÈñãÁô∫„Ç≥„É≥„ÉÜ„ÉäË®≠ÂÆö',
        purpose: 'DockerÁí∞Â¢É„Åß„ÅÆÈñãÁô∫„Çµ„Éù„Éº„Éà',
        files: {}
    }
};

/**
 * Êó¢Â≠ò„É©„Ç§„Éñ„É©„É™„ÅÆË®≠ÂÆö
 */
const LIBRARY_CONFIG = {
    // TypeDocË®≠ÂÆö
    typedoc: {
        enabled: true,
        command: 'npx typedoc',
        options: [
            '--out docs/api',
            '--theme default',
            '--excludePrivate',
            '--excludeProtected',
            '--excludeExternals',
            '--includeVersion',
            '--readme README.md',
            '--entryPointStrategy expand'
        ],
        sourceDir: 'src/'
    },

    // JSDocË®≠ÂÆö
    jsdoc: {
        enabled: true,
        command: 'npx jsdoc',
        options: [
            '--destination docs/js-api',
            '--template node_modules/clean-jsdoc-theme',
            '--configure jsdoc.json'
        ],
        sourceDir: 'src/'
    },

    // „Ç´„Çπ„Çø„É†„Éâ„Ç≠„É•„É°„É≥„ÉàË®≠ÂÆö
    custom: {
        enabled: true,
        outputDir: 'docs/structure',
        templateDir: 'templates/docs'
    }
};

/**
 * TypeDoc„Çí‰ΩøÁî®„Åó„ÅüAPI„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
 */
async function generateTypeDocDocs() {
    if (!LIBRARY_CONFIG.typedoc.enabled) {
        console.log('‚è≠Ô∏è  TypeDoc„ÅØÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
        return;
    }

    try {
        console.log('üìö TypeDoc„ÅßAPI„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÁîüÊàê‰∏≠...');

        const command = `${LIBRARY_CONFIG.typedoc.command} ${LIBRARY_CONFIG.typedoc.options.join(' ')} ${LIBRARY_CONFIG.typedoc.sourceDir}`;

        execSync(command, { stdio: 'inherit' });
        console.log('‚úÖ TypeDoc„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü: docs/api/');

    } catch (error) {
        console.error('‚ùå TypeDoc„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error.message);
    }
}

/**
 * JSDoc„Çí‰ΩøÁî®„Åó„ÅüJavaScript API„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
 */
async function generateJSDocDocs() {
    if (!LIBRARY_CONFIG.jsdoc.enabled) {
        console.log('‚è≠Ô∏è  JSDoc„ÅØÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
        return;
    }

    try {
        console.log('üìö JSDoc„ÅßAPI„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÁîüÊàê‰∏≠...');

        const command = `${LIBRARY_CONFIG.jsdoc.command} ${LIBRARY_CONFIG.jsdoc.options.join(' ')} ${LIBRARY_CONFIG.jsdoc.sourceDir}`;

        execSync(command, { stdio: 'inherit' });
        console.log('‚úÖ JSDoc„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü: docs/js-api/');

    } catch (error) {
        console.error('‚ùå JSDoc„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error.message);
    }
}

/**
 * Êó¢Â≠ò„É©„Ç§„Éñ„É©„É™„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê
 */
async function generateLibraryConfigs() {
    try {
        // JSDocË®≠ÂÆö„Éï„Ç°„Ç§„É´
        const jsdocConfig = {
            "tags": {
                "allowUnknownTags": true
            },
            "templates": {
                "cleverLinks": false,
                "monospaceLinks": false
            },
            "opts": {
                "destination": "./docs/js-api",
                "recurse": true,
                "template": "node_modules/clean-jsdoc-theme"
            },
            "plugins": [
                "plugins/markdown"
            ],
            "source": {
                "include": ["src"],
                "includePattern": "\\.js$",
                "excludePattern": "(node_modules/|docs)"
            }
        };

        await fs.writeJson('jsdoc.json', jsdocConfig, { spaces: 2 });
        console.log('‚úÖ JSDocË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü');

    } catch (error) {
        console.error('‚ùå Ë®≠ÂÆö„Éï„Ç°„Ç§„É´ÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error.message);
    }
}

/**
 * „Éâ„Ç≠„É•„É°„É≥„Éà„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Éö„Éº„Ç∏„ÇíÁîüÊàê
 */
async function generateIndexPage() {
    const indexContent = `# Laravel Blade Visualizer - „Éâ„Ç≠„É•„É°„É≥„Éà

## üìö „Éâ„Ç≠„É•„É°„É≥„Éà‰∏ÄË¶ß

### üìñ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†
- [„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†Ë©≥Á¥∞](./structure/STRUCTURE.md) - „Éá„Ç£„É¨„ÇØ„Éà„É™„Å®„Éï„Ç°„Ç§„É´„ÅÆË™¨Êòé
- [ÊäÄË°ì‰ªïÊßòÊõ∏](./TECHNICAL.md) - ÈñãÁô∫Áí∞Â¢É„Å®ÊäÄË°ì‰ªïÊßò

### üîß API„Éâ„Ç≠„É•„É°„É≥„Éà
- [TypeScript API](./api/) - TypeDoc„ÅßÁîüÊàê„Åï„Çå„ÅüAPI„Éâ„Ç≠„É•„É°„É≥„Éà
- [JavaScript API](./js-api/) - JSDoc„ÅßÁîüÊàê„Åï„Çå„ÅüAPI„Éâ„Ç≠„É•„É°„É≥„Éà

### üìã ÈñãÁô∫„Ç¨„Ç§„Éâ
- [README](../README.md) - „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ¶ÇË¶Å„Å®„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
- [ÈñãÁô∫„É´„Éº„É´](../.cursorrules) - Cursor IDEË®≠ÂÆö

## üîÑ Ëá™ÂãïÁîüÊàêÊÉÖÂ†±

- **ÁîüÊàêÊó•ÊôÇ:** ${new Date().toLocaleString('ja-JP')}
- **ÁîüÊàê„Çπ„ÇØ„É™„Éó„Éà:** \`scripts/docs-generator-enhanced.js\`
- **‰ΩøÁî®„É©„Ç§„Éñ„É©„É™:** TypeDoc, JSDoc, chokidar

## üìù „Éâ„Ç≠„É•„É°„É≥„ÉàÊõ¥Êñ∞ÊñπÊ≥ï

\`\`\`bash
# ÂÖ®„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÁîüÊàê
npm run docs:generate:enhanced

# Áõ£Ë¶ñ„É¢„Éº„Éâ„ÅßËá™ÂãïÊõ¥Êñ∞
npm run docs:watch:enhanced

# ÁâπÂÆö„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆ„ÅøÁîüÊàê
npm run docs:typedoc    # TypeDoc„ÅÆ„Åø
npm run docs:jsdoc      # JSDoc„ÅÆ„Åø
npm run docs:structure  # ÊßãÈÄ†„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆ„Åø
\`\`\`

> ‚ö†Ô∏è „Åì„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅØËá™ÂãïÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÊâãÂãï„ÅßÁ∑®ÈõÜ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ
`;

    try {
        await fs.ensureDir('docs');
        await fs.writeFile('docs/index.md', indexContent, 'utf8');
        console.log('‚úÖ „Éâ„Ç≠„É•„É°„É≥„Éà„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Éö„Éº„Ç∏„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü');
    } catch (error) {
        console.error('‚ùå „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Éö„Éº„Ç∏ÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error.message);
    }
}

/**
 * „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
 */
async function generateStructureDocumentation() {
    console.log('üìö „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÁîüÊàê‰∏≠...');

    try {
        // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„ÇíËß£Êûê
        const structure = analyzeDirectory('.');

        // Markdown„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÁîüÊàê
        let markdown = `# Laravel Blade Visualizer - „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†

## Ê¶ÇË¶Å

„Åì„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅØ„ÄÅLaravel Blade VisualizerÊã°ÂºµÊ©üËÉΩ„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„Å®ÂêÑ„Éá„Ç£„É¨„ÇØ„Éà„É™„Éª„Éï„Ç°„Ç§„É´„ÅÆÂΩπÂâ≤„Å´„Å§„ÅÑ„Å¶Ë™¨Êòé„Åó„Åæ„Åô„ÄÇ

## „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†

\`\`\`
laravel-blade-visualizer/
\`\`\`

${generateStructureMarkdown(structure)}

## „Éá„Ç£„É¨„ÇØ„Éà„É™Ë©≥Á¥∞

`;

        // ÂêÑ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆË©≥Á¥∞Ë™¨Êòé
        for (const [dirName, dirInfo] of Object.entries(PROJECT_STRUCTURE)) {
            markdown += `### \`${dirName}/\`\n\n`;
            markdown += `**Ë™¨Êòé:** ${dirInfo.description}\n\n`;
            markdown += `**ÁõÆÁöÑ:** ${dirInfo.purpose}\n\n`;

            if (Object.keys(dirInfo.files).length > 0) {
                markdown += `**‰∏ªË¶Å„Éï„Ç°„Ç§„É´:**\n\n`;
                for (const [fileName, fileDesc] of Object.entries(dirInfo.files)) {
                    markdown += `- \`${fileName}\` - ${fileDesc}\n`;
                }
                markdown += '\n';
            }

            markdown += `---\n\n`;
        }

        // „ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´„ÅÆË©≥Á¥∞Ë™¨Êòé
        markdown += generateSourceDescriptions();

        // Ëá™ÂãïÁîüÊàêÊÉÖÂ†±
        markdown += `## Ëá™ÂãïÁîüÊàêÊÉÖÂ†±

- **ÁîüÊàêÊó•ÊôÇ:** ${new Date().toLocaleString('ja-JP')}
- **ÁîüÊàê„Çπ„ÇØ„É™„Éó„Éà:** \`scripts/docs-generator.js\`
- **Êõ¥Êñ∞ÊñπÊ≥ï:** \`npm run docs:generate\`

> ‚ö†Ô∏è „Åì„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅØËá™ÂãïÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÊâãÂãï„ÅßÁ∑®ÈõÜ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ
`;

        // „Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
        const outputPath = path.join('docs', 'STRUCTURE.md');
        await fs.ensureDir('docs');
        await fs.writeFile(outputPath, markdown, 'utf8');

        console.log(`‚úÖ „Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü: ${outputPath}`);

        // ÊäÄË°ìË≥áÊñô„ÇÇÊõ¥Êñ∞
        await updateTechnicalDocs();

    } catch (error) {
        console.error('‚ùå „Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
        process.exit(1);
    }
}

/**
 * Êó¢Â≠ò„É©„Ç§„Éñ„É©„É™„ÅÆ‰æùÂ≠òÈñ¢‰øÇ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
 */
async function checkLibraryDependencies() {
    const dependencies = [
        { name: 'typedoc', package: 'typedoc' },
        { name: 'jsdoc', package: 'jsdoc' },
        { name: 'clean-jsdoc-theme', package: 'clean-jsdoc-theme' }
    ];

    const missing = [];

    for (const dep of dependencies) {
        try {
            require.resolve(dep.package);
        } catch (error) {
            missing.push(dep.package);
        }
    }

    if (missing.length > 0) {
        console.log('üì¶ ‰∏çË∂≥„Åó„Å¶„ÅÑ„Çã‰æùÂ≠òÈñ¢‰øÇ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠...');
        console.log(`   ${missing.join(', ')}`);

        try {
            execSync(`npm install --save-dev ${missing.join(' ')}`, { stdio: 'inherit' });
            console.log('‚úÖ ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');
        } catch (error) {
            console.error('‚ùå ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error.message);
            return false;
        }
    }

    return true;
}

/**
 * „É°„Ç§„É≥„ÅÆ„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàêÂá¶ÁêÜ
 */
async function generateDocumentation() {
    console.log('üöÄ „Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê„ÇíÈñãÂßã„Åó„Åæ„Åô...');

    try {
        // ‰æùÂ≠òÈñ¢‰øÇ„ÉÅ„Çß„ÉÉ„ÇØ
        const depsOk = await checkLibraryDependencies();
        if (!depsOk) {
            console.error('‚ùå ‰æùÂ≠òÈñ¢‰øÇ„ÅÆÊ∫ñÂÇô„Åå„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
            process.exit(1);
        }

        // Ë®≠ÂÆö„Éï„Ç°„Ç§„É´ÁîüÊàê
        await generateLibraryConfigs();

        // Êó¢Â≠ò„É©„Ç§„Éñ„É©„É™„Åß„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
        await generateTypeDocDocs();
        await generateJSDocDocs();

        // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
        await generateStructureDocumentation();

        // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Éö„Éº„Ç∏ÁîüÊàê
        await generateIndexPage();

        console.log('üéâ „Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ');
        console.log('üìÅ ÁîüÊàê„Åï„Çå„Åü„Éâ„Ç≠„É•„É°„É≥„Éà:');
        console.log('   - docs/api/ (TypeDoc)');
        console.log('   - docs/js-api/ (JSDoc)');
        console.log('   - docs/structure/ („Ç´„Çπ„Çø„É†)');
        console.log('   - docs/index.md („Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ)');

    } catch (error) {
        console.error('‚ùå „Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
        process.exit(1);
    }
}

// „Çπ„ÇØ„É™„Éó„Éà„ÅåÁõ¥Êé•ÂÆüË°å„Åï„Çå„ÅüÂ†¥Âêà
if (require.main === module) {
    generateDocumentation();
}

/**
 * „Éï„Ç°„Ç§„É´„ÅÆÁ®ÆÈ°û„Å´Âü∫„Å•„ÅèË™¨Êòé„ÇíÁîüÊàê
 * @param {string} filePath - „Éï„Ç°„Ç§„É´„Éë„Çπ
 * @returns {string} „Éï„Ç°„Ç§„É´„ÅÆË™¨Êòé
 */
function getFileDescription(filePath) {
    const ext = path.extname(filePath);
    const fileName = path.basename(filePath);

    const descriptions = {
        '.ts': 'TypeScript„ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´',
        '.js': 'JavaScript„Éï„Ç°„Ç§„É´',
        '.json': 'Ë®≠ÂÆö„Éï„Ç°„Ç§„É´',
        '.md': 'Markdown„Éâ„Ç≠„É•„É°„É≥„Éà',
        '.yml': 'YAMLË®≠ÂÆö„Éï„Ç°„Ç§„É´',
        '.yaml': 'YAMLË®≠ÂÆö„Éï„Ç°„Ç§„É´',
        '.gitignore': 'GitÈô§Â§ñË®≠ÂÆö',
        '.eslintrc.json': 'ESLintË®≠ÂÆö',
        'tsconfig.json': 'TypeScriptË®≠ÂÆö',
        'package.json': 'npmË®≠ÂÆö„Éï„Ç°„Ç§„É´',
        'package-lock.json': 'npm‰æùÂ≠òÈñ¢‰øÇ„É≠„ÉÉ„ÇØ„Éï„Ç°„Ç§„É´',
        'Dockerfile': 'DockerË®≠ÂÆö„Éï„Ç°„Ç§„É´',
        'docker-compose.yml': 'Docker ComposeË®≠ÂÆö',
        '.cursorrules': 'Cursor IDEË®≠ÂÆö'
    };

    return descriptions[fileName] || descriptions[ext] || '„Éï„Ç°„Ç§„É´';
}

/**
 * „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÇíÂÜçÂ∏∞ÁöÑ„Å´Ëß£Êûê
 * @param {string} dirPath - „Éá„Ç£„É¨„ÇØ„Éà„É™„Éë„Çπ
 * @param {number} depth - Ê∑±„Åï„É¨„Éô„É´
 * @returns {Object} „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†
 */
function analyzeDirectory(dirPath, depth = 0) {
    const structure = {
        name: path.basename(dirPath),
        path: dirPath,
        type: 'directory',
        children: [],
        files: []
    };

    try {
        const items = fs.readdirSync(dirPath);

        for (const item of items) {
            const fullPath = path.join(dirPath, item);
            const stat = fs.statSync(fullPath);

            if (stat.isDirectory()) {
                // Èô§Â§ñ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„Çπ„Ç≠„ÉÉ„Éó
                if (['node_modules', '.git', 'out', '.vscode-test'].includes(item)) {
                    continue;
                }

                if (depth < 3) { // Ê∑±„ÅïÂà∂Èôê
                    structure.children.push(analyzeDirectory(fullPath, depth + 1));
                }
            } else {
                structure.files.push({
                    name: item,
                    path: fullPath,
                    type: 'file',
                    description: getFileDescription(item)
                });
            }
        }
    } catch (error) {
        console.warn(`Warning: Could not read directory ${dirPath}:`, error.message);
    }

    return structure;
}

/**
 * „ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´„Åã„Çâ„Ç≥„É°„É≥„Éà„ÇíÊäΩÂá∫
 * @param {string} filePath - „Éï„Ç°„Ç§„É´„Éë„Çπ
 * @returns {string} ÊäΩÂá∫„Åï„Çå„Åü„Ç≥„É°„É≥„Éà
 */
function extractComments(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        const ext = path.extname(filePath);

        if (ext === '.ts' || ext === '.js') {
            // JSDoc„Ç≥„É°„É≥„Éà„ÇíÊäΩÂá∫
            const jsdocMatches = content.match(/\/\*\*[\s\S]*?\*\//g);
            if (jsdocMatches) {
                return jsdocMatches.map(comment =>
                    comment.replace(/\/\*\*|\*\//g, '').trim()
                ).join('\n\n');
            }

            // ÂçòË°å„Ç≥„É°„É≥„Éà„ÇíÊäΩÂá∫
            const singleLineMatches = content.match(/\/\/.*$/gm);
            if (singleLineMatches) {
                return singleLineMatches.map(comment =>
                    comment.replace(/\/\//, '').trim()
                ).join('\n');
            }
        }

        return '';
    } catch (error) {
        return '';
    }
}

/**
 * MarkdownÂΩ¢Âºè„Åß„Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÇíÁîüÊàê
 * @param {Object} structure - „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†
 * @param {number} level - Ë¶ãÂá∫„Åó„É¨„Éô„É´
 * @returns {string} MarkdownÂΩ¢Âºè„ÅÆÊßãÈÄ†
 */
function generateStructureMarkdown(structure, level = 1) {
    let markdown = '';
    const indent = '  '.repeat(level - 1);

    // „Éá„Ç£„É¨„ÇØ„Éà„É™ÊÉÖÂ†±
    const dirInfo = PROJECT_STRUCTURE[structure.name];
    if (dirInfo) {
        markdown += `${indent}- **${structure.name}/** - ${dirInfo.description}\n`;
        markdown += `${indent}  - ÁõÆÁöÑ: ${dirInfo.purpose}\n`;
    } else {
        markdown += `${indent}- **${structure.name}/**\n`;
    }

    // „Éï„Ç°„Ç§„É´‰∏ÄË¶ß
    for (const file of structure.files) {
        const fileInfo = dirInfo?.files?.[file.name];
        if (fileInfo) {
            markdown += `${indent}  - \`${file.name}\` - ${fileInfo}\n`;
        } else {
            markdown += `${indent}  - \`${file.name}\` - ${file.description}\n`;
        }
    }

    // „Çµ„Éñ„Éá„Ç£„É¨„ÇØ„Éà„É™
    for (const child of structure.children) {
        markdown += generateStructureMarkdown(child, level + 1);
    }

    return markdown;
}

/**
 * „ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´„ÅÆË™¨Êòé„ÇíÁîüÊàê
 * @returns {string} „ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´„ÅÆË™¨ÊòéMarkdown
 */
function generateSourceDescriptions() {
    let markdown = '## „ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´Ë©≥Á¥∞\n\n';

    const sourceFiles = glob.sync('src/**/*.ts', { ignore: ['node_modules/**'] });

    for (const filePath of sourceFiles) {
        const relativePath = path.relative('.', filePath);
        const fileName = path.basename(filePath);
        const comments = extractComments(filePath);

        markdown += `### \`${relativePath}\`\n\n`;

        if (comments) {
            markdown += `**Ë™¨Êòé:**\n\`\`\`\n${comments}\n\`\`\`\n\n`;
        }

        markdown += `**ÂΩπÂâ≤:** ${getFileDescription(fileName)}\n\n`;
        markdown += `---\n\n`;
    }

    return markdown;
}

/**
 * ÊäÄË°ìË≥áÊñô„ÇíÊõ¥Êñ∞
 */
async function updateTechnicalDocs() {
    try {
        const technicalPath = path.join('docs', 'TECHNICAL.md');

        if (await fs.pathExists(technicalPath)) {
            let content = await fs.readFile(technicalPath, 'utf8');

            // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÊõ¥Êñ∞
            const structureSection = `## „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†

Ë©≥Á¥∞„Å™„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅ[STRUCTURE.md](./STRUCTURE.md)„ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

`;

            // Êó¢Â≠ò„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÁΩÆÊèõ
            const structureRegex = /## „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†[\s\S]*?(?=## |$)/;
            if (structureRegex.test(content)) {
                content = content.replace(structureRegex, structureSection);
            } else {
                // „Çª„ÇØ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÈÅ©Âàá„Å™Â†¥ÊâÄ„Å´ÊåøÂÖ•
                const insertIndex = content.indexOf('## ÈñãÁô∫Áí∞Â¢É');
                if (insertIndex !== -1) {
                    content = content.slice(0, insertIndex) + structureSection + content.slice(insertIndex);
                }
            }

            await fs.writeFile(technicalPath, content, 'utf8');
            console.log('‚úÖ ÊäÄË°ìË≥áÊñô„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è ÊäÄË°ìË≥áÊñô„ÅÆÊõ¥Êñ∞‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error.message);
    }
}

module.exports = {
    generateDocumentation,
    generateTypeDocDocs,
    generateJSDocDocs,
    generateIndexPage,
    checkLibraryDependencies,
    generateStructureDocumentation
}; 
