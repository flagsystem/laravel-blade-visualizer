# Cursor ルールファイル

## コメントとドキュメント

### 日本語コメントの充実化
- すべての関数、クラス、メソッドには日本語での詳細なコメントを記述する
- 複雑なロジックには行内コメントで説明を追加する
- JSDocスタイルのコメントを使用し、@param、@returns、@throwsタグを適切に記述する
- コメントは以下の形式で記述する：

```typescript
/**
 * 関数の目的を説明する日本語コメント
 * 
 * @param {string} paramName - パラメータの説明
 * @param {number} options - オプションの説明
 * @returns {Promise<Result>} 戻り値の説明
 * @throws {Error} エラーの説明
 */
```

### コードの可読性向上
- 変数名、関数名は英語で記述し、コメントで日本語説明を追加する
- 複雑な条件分岐にはコメントで理由を説明する
- マジックナンバーには定数として定義し、コメントで説明する

## テストの自動作成

### テストファイルの命名規則
- テストファイル名は `test` で始まり、テスト対象のファイル名に `test` を追加する
- 例：`extension.ts` → `extension.test.ts`
- テストケース名は完結でわかりやすい日本語または英語で記述する

### テストケースの構造
```typescript
describe('機能名', () => {
  describe('正常系', () => {
    it('test正常な入力で期待される結果が返される', async () => {
      // テストコード
    });
  });

  describe('異常系', () => {
    it('test無効な入力でエラーが発生する', async () => {
      // テストコード
    });
  });
});
```

### テストの自動生成ルール
- 新しい関数やクラスを作成する際は、必ず対応するテストファイルも作成する
- テストは以下の項目をカバーする：
  - 正常系の動作確認
  - 異常系のエラーハンドリング
  - 境界値のテスト
  - 非同期処理のテスト（該当する場合）
- __test__ ディレクトリにテストファイルを作成する
- テストファイルはテスト対象のファイルと同じディレクトリに配置する
- テストファイルはテスト対象のファイルと同じ名前で、テストファイル名に `test` を追加する
- テストファイルはテスト対象のファイルと同じ名前で、テストファイル名に `test` を追加する

## テストの自動実行と継続修正

### テスト実行の自動化
- コード変更時に自動でテストを実行する
- テストが失敗した場合は、即座に修正を行う
- テストカバレッジを維持し、新機能追加時はテストも追加する

### 継続的改善
- テスト結果に基づいてコードを継続的に改善する
- パフォーマンスの問題があれば最適化を行う
- セキュリティの問題があれば修正する

## コード品質

### TypeScriptの活用
- 型安全性を最大限活用する
- インターフェースとタイプを適切に定義する
- any型の使用は最小限に抑える

### エラーハンドリング
- 適切なエラーハンドリングを実装する
- エラーメッセージは日本語で分かりやすく記述する
- ログ出力を適切に行い、デバッグを容易にする

### パフォーマンス
- 非同期処理を適切に使用する
- メモリリークを防ぐため、リソースの適切な解放を行う
- 不要な処理を避け、効率的なアルゴリズムを使用する

## プロジェクト固有のルール

### Laravel Blade Visualizer プロジェクト
- VSCode拡張機能の開発であることを意識する
- ユーザビリティを重視したUI/UXを設計する
- エラーメッセージはユーザーフレンドリーにする
- パフォーマンスを重視し、大きなファイルでも高速に動作するようにする

### ファイル構造
- 機能ごとにディレクトリを分ける
- 共通のユーティリティは `utils` ディレクトリに配置する
- テストファイルは対応するソースファイルと同じディレクトリに配置する

## パッケージ化とデプロイ

### VSCEパッケージ化の自動化
- `npx vsce package` コマンドを実行する際は、自動的に `--yes` フラグを付与する
- パッケージ化前に以下の処理を自動実行する：
  - `npm run compile` - TypeScriptのコンパイル
  - `npm run lint` - コード品質チェック
  - `npm test` - テストの実行
- パッケージ化後は自動的にバージョン番号を更新する

### パッケージ化スクリプト
```bash
# 自動パッケージ化（yesフラグ付き）
npm run package

# パッケージ化とバージョン更新
npm run package:version
```

### デプロイメントルール
- パッケージ化前に必ずテストを実行する
- パッケージ化後は自動的にREADMEを更新する
- バージョン番号はセマンティックバージョニングに従う

## コミットメッセージ

### コミットメッセージの形式
```
feat: 新機能の追加
fix: バグ修正
docs: ドキュメントの更新
test: テストの追加・修正
refactor: リファクタリング
style: コードスタイルの修正
```

### 日本語での説明
- コミットメッセージの後に日本語での詳細な説明を追加する
- 変更理由と影響範囲を明確に記述する 
